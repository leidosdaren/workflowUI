{"ast":null,"code":"'use strict';\n\nvar dotenvExpand = function (config) {\n  // if ignoring process.env, use a blank object\n  var environment = config.ignoreProcessEnv ? {} : process.env;\n\n  var interpolate = function (envValue) {\n    var matches = envValue.match(/(.?\\${?(?:[a-zA-Z0-9_]+)?}?)/g) || [];\n    return matches.reduce(function (newEnv, match) {\n      var parts = /(.?)\\${?([a-zA-Z0-9_]+)?}?/g.exec(match);\n      var prefix = parts[1];\n      var value, replacePart;\n\n      if (prefix === '\\\\') {\n        replacePart = parts[0];\n        value = replacePart.replace('\\\\$', '$');\n      } else {\n        var key = parts[2];\n        replacePart = parts[0].substring(prefix.length); // process.env value 'wins' over .env file's value\n\n        value = environment.hasOwnProperty(key) ? environment[key] : config.parsed[key] || ''; // Resolve recursive interpolations\n\n        value = interpolate(value);\n      }\n\n      return newEnv.replace(replacePart, value);\n    }, envValue);\n  };\n\n  for (var configKey in config.parsed) {\n    var value = environment.hasOwnProperty(configKey) ? environment[configKey] : config.parsed[configKey];\n    config.parsed[configKey] = interpolate(value);\n  }\n\n  for (var processKey in config.parsed) {\n    environment[processKey] = config.parsed[processKey];\n  }\n\n  return config;\n};\n\nmodule.exports = dotenvExpand;","map":null,"metadata":{},"sourceType":"script"}