{"ast":null,"code":"/*\n * This library wraps the popular node dotenv module\n * For it's configuration\n *\n */\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar {\n  isObj\n} = require('./funcs');\n\nvar NODE_ENV = process.env.NODE_ENV;\n\nfunction main(env = true, dir = null, encoding = null, defaultEnvFallback = true) {\n  this.env = env;\n  this.dir = dir;\n  this.encoding = encoding;\n  this.customEnvConfig = {\n    dir: this.dir,\n    envname: this.env,\n    defaultEnvFallback\n  };\n  this.configDotEnv = {\n    path: null,\n    encoding: this.encoding\n  };\n\n  this.setCustomEnvConfig = function (obj) {\n    // var dir = typeof (dir) == 'string' ? dir : process.cwd()\n    // var envname = envname\n    if (obj != null) {\n      if (obj && typeof obj == 'object' && obj.constructor.name.toLowerCase() == 'object' && Object.keys(obj).length > 0) {\n        for (var v in obj) {\n          this.customEnvConfig[v] = obj[v];\n        }\n      }\n    }\n  };\n\n  this.getCustomEnvConfig = function () {\n    return this.customEnvConfig;\n  };\n\n  this.setDotEnvConfig = function (obj = null) {\n    if (obj != null) {\n      if (typeof obj == 'object' && obj.constructor.name.toLowerCase() == 'object') {\n        for (var v in obj) {\n          this.configDotEnv[v] = obj[v];\n        }\n      }\n    }\n  };\n\n  this.getDotEnvConfig = function () {\n    return this.configDotEnv;\n  };\n\n  this.getEnvFile = function (dir, envname = null) {\n    // Check if dir exists and its a directory\n    var dir = typeof dir == 'string' ? dir : process.cwd();\n    envname = typeof envname == 'string' ? envname : envname === true && process.env.NODE_ENV ? process.env.NODE_ENV : undefined;\n    var defaultEnvRegex = \"\\.env$\";\n    var envRegex = defaultEnvRegex;\n    var dirIsDirectory = fs.lstatSync(dir).isDirectory();\n\n    if (!dirIsDirectory) {\n      throw new Error('dir must be a directory');\n      return false;\n    }\n\n    var filesInDir = fs.readdirSync(dir); // console.log(filesInDir)\n\n    if (Array.isArray(filesInDir) && filesInDir.length > 0) {\n      if (envname) {\n        //@UPDATE Update envname to support both `dev or development`\n        if (['dev', 'development'].includes(envname)) {\n          envRegex = {\n            \"dev\": \"\\.env\\.dev?$\",\n            \"development\": \"\\.env\\.development?$\"\n          };\n        } else {\n          envRegex = \"\\.env\\.\" + envname + \"$\";\n        }\n      } else {\n        if (!defaultEnvFallback) {\n          return false;\n        }\n\n        envRegex = defaultEnvRegex;\n        console.warn(\"No env file present for the current environment: \", envname, '\\n Falling back to .env config');\n      }\n\n      let testCase;\n      let objKeysArray;\n      let keyIndex;\n      let isEnvObject = isObj(envRegex);\n\n      for (var file of filesInDir) {\n        if (isEnvObject) {\n          //@UPDATE check if envname matches `dev or development`\n          objKeysArray = Object.keys(envRegex);\n          keyIndex = objKeysArray.indexOf(envname);\n          testCase = new RegExp(envRegex[envname]).test(file);\n        } else {\n          testCase = new RegExp(envRegex).test(file);\n        }\n\n        if (testCase) {\n          return path.join(dir, file);\n        }\n      } // Now check for .dev|.development substitutes\n\n\n      if (isEnvObject) {\n        for (var file of filesInDir) {\n          if (new RegExp(envRegex[objKeysArray[1 - keyIndex]]).test(file)) {\n            return path.join(dir, file);\n          }\n        }\n      } // throw new Error(\"env files not present in directory \" + dir)\n\n\n      if (defaultEnvFallback && envRegex != defaultEnvRegex) {\n        console.warn(\"No env file present for the current environment: \", envname, '\\n Falling back to .env config');\n\n        for (var file of filesInDir) {\n          if (new RegExp(defaultEnvRegex).test(file)) {\n            return path.join(dir, file);\n          }\n        }\n      }\n    } else {\n      if (defaultEnvFallback && envRegex != defaultEnvRegex) {\n        console.warn(\"No env file present for the current environment: \", envname, '\\n Falling back to .env config');\n\n        for (var file of filesInDir) {\n          if (new RegExp(defaultEnvRegex).test(file)) {\n            return path.join(dir, file);\n          }\n        }\n      }\n    }\n\n    console.warn(\"No env file present for the current environment: \", envname);\n    return false;\n  };\n\n  this.loadDotEnvConfig = function () {\n    var dotenvobj = this.getDotEnvConfig();\n\n    if (dotenvobj.path) {\n      require('dotenv-expand')(require('dotenv').config(dotenvobj));\n    }\n  };\n\n  this.loadCustomDotEnv = function () {\n    // setTheCustomEnv\n    this.setCustomEnvConfig(this.dir, this.env);\n    var currentCustomEnvConfig = this.getCustomEnvConfig(); // Set and load dotenv\n\n    this.setDotEnvConfig({\n      'path': this.getEnvFile(currentCustomEnvConfig.dir, currentCustomEnvConfig.envname)\n    }); // Start dotenv with the available settings\n\n    this.loadDotEnvConfig();\n  };\n\n  this.loadCustomDotEnv();\n} // Create a new constructor to make some properties available\n\n\nvar pubLicMain = new Object();\nmodule.exports = {\n  env: function () {\n    this.main = new main(arguments[0], arguments[1]);\n\n    if (arguments[2] === true) {\n      this.main.setCustomEnvConfig({\n        'envname': process.env.NODE_ENV\n      });\n    }\n\n    if (arguments[3] === false) {\n      this.main.setCustomEnvConfig({\n        defaultEnvFallback: false\n      });\n    }\n\n    return this;\n  },\n  dotenvConfig: function () {\n    this.main.setDotEnvConfig(...arguments);\n    return this;\n  },\n  config: function () {\n    this.main.setCustomEnvConfig(...arguments);\n    return this;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}